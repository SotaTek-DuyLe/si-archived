#  Template .NET Core build

#  This template allows you to validate your .NET Core package.
#  The workflow allows running tests and code linting on the default branch.

image: mcr.microsoft.com/dotnet/core/sdk:3.1

pipelines:
  custom:
    Run junit report:
      - step:
            runs-on:
              - self.hosted
              - windows
            script:
              - dotnet clean
              - dotnet restore
              - cd si-automated-tests
              - dotnet add package JUnitTestLogger --version 1.1.0
              - dotnet test --logger:"junit" --settings test.runsettings
            artifacts:
              - '*/TestResults/Screenshots/*.png'

    Run custom test:
      - variables:
            - name: TestName
      - step:
            runs-on:
              - self.hosted
              - windows
            script:
              - echo "Running test named " $env:TestName
              - dotnet clean
              - dotnet restore
              - cd si-automated-tests
              - dotnet add package JUnitTestLogger --version 1.1.0
              - dotnet test --filter Name~$env:TestName --logger:"junit" --settings test.runsettings
            artifacts:
              - '*/TestResults/Screenshots/*.png'

    Run custom test class:
      - variables:
            - name: TestClass
      - step:
            runs-on:
              - self.hosted
              - windows
            script:
              - echo "Running class named " $env:TestClass
              - dotnet clean
              - dotnet restore
              - cd si-automated-tests
              - dotnet add package JUnitTestLogger --version 1.1.0
              - dotnet test --filter FullyQualifiedName~si_automated_tests.Source.Test.$env:TestClass --logger:"junit" --settings test.runsettings
            artifacts:
              - '*/TestResults/Screenshots/*.png'

    Run custom test category:
      - variables:
            - name: TestCategory
      - step:
            runs-on:
              - self.hosted
              - windows
            script:
              - echo "Running Category named " $env:TestCategory
              - dotnet clean
              - dotnet restore
              - cd si-automated-tests
              - dotnet add package JUnitTestLogger --version 1.1.0
              - dotnet test --filter TestCategory=$env:TestCategory --logger:"junit" --settings test.runsettings
            artifacts:
              - '*/TestResults/Screenshots/*.png'
    Run test on custom environment:
      - variables:
            - name: TestEnv
      - step:
            runs-on:
              - self.hosted
              - windows
            script:
              - echo "Running on environment " $env:TestEnv
              - $env:SCRIPTT='"TestRunParameters.Parameter(name=\\\\\\\"env\\\\\\\", value=\\\\\\\"'+$env:TestEnv+'\\\\\\\")"'
              - echo $env:SCRIPTT
              - dotnet clean
              - dotnet restore
              - cd si-automated-tests
              - dotnet add package JUnitTestLogger --version 1.1.0
              - dotnet test --filter Name~TC_001 --logger:"junit" --settings test.runsettings -- $env:SCRIPTT
            artifacts:
              - '*/TestResults/Screenshots/*.png'
              
  default:
    - parallel:
        - step:
            name: Build
            caches:
              - dotnetcore
            script:
              - dotnet restore
              - dotnet build --no-restore
        - step:
            name: Lint the code
            caches:
              - dotnetcore
            script:
              - export SOLUTION_NAME=si-automated-tests
              - export REPORTS_PATH=linter-reports
              - dotnet new tool-manifest
              - dotnet tool install JetBrains.ReSharper.GlobalTools
              - dotnet tool restore
              - dotnet jb inspectcode ${SOLUTION_NAME}.sln --output="${REPORTS_PATH}/jb-${BITBUCKET_BUILD_NUMBER}.xml"
            artifacts:
              - linter-reports/**
